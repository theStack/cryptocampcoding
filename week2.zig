// week 2, secp256k1 exercise 1:
// Implement affine point addition for secp256k1
const FE = u256;
const secp256k1_P: FE = (1<<256) - (1<<32) - 977;
fn fe_add(f1: FE, f2: FE) FE { return @intCast((@as(u257, f1) + f2) % secp256k1_P); }
fn fe_sub(f1: FE, f2: FE) FE { return fe_add(f1, secp256k1_P - f2); }
fn fe_mul(f1: FE, f2: FE) FE { return @intCast((@as(u512, f1) * f2) % secp256k1_P); }
fn fe_inv(f: FE) FE          { return @import("week1.zig").mod_inv(f, secp256k1_P); }
fn fe_div(f1: FE, f2: FE) FE { return fe_mul(f1, fe_inv(f2)); }

const GE = struct { x: FE, y: FE, inf: bool };
const point_at_infinity = GE { .x = 0, .y = 0, .inf = true };

fn ge_equal(p1: *const GE, p2: *const GE) bool {
    return p1.x == p2.x and p1.y == p2.y and p1.inf == p2.inf;
}

fn ge_add(p1: *const GE, p2: *const GE) GE {
    // trivial cases
    if (p1.inf) return p2.*;
    if (p2.inf) return p1.*;
    if (p1.x == p2.x and fe_add(p1.y, p2.y) == 0) return point_at_infinity;

    // compute the slope
    const lambda = if (ge_equal(p1, p2))
        fe_div(fe_mul(3, fe_mul(p1.x, p2.x)), fe_mul(2, p1.y)) // point doubling
    else
        fe_div(fe_sub(p2.y, p1.y), fe_sub(p2.x, p1.x)); // point addition

    // compute resulting affine coordinates
    const x_result = fe_sub(fe_mul(lambda, lambda), fe_add(p1.x, p2.x));
    const y_result = fe_sub(fe_mul(lambda, fe_sub(p1.x, x_result)), p1.y);
    return GE { .x = x_result, .y = y_result, .inf = false };
}

// more convenient point type for test vectors (null = point at infinity)
const SimplePoint = ?struct{FE, FE};

fn simple_point_to_ge(tp: SimplePoint) GE {
    return if (tp != null) GE { .x = tp.?[0], .y = tp.?[1], .inf = false } else point_at_infinity;
}

fn test_point_add(tp1: SimplePoint, tp2: SimplePoint, res: SimplePoint) void {
    const p1 = simple_point_to_ge(tp1);
    const p2 = simple_point_to_ge(tp2);
    const result_expected = simple_point_to_ge(res);
    const result_actual = ge_add(&p1, &p2);
    @import("std").debug.assert(ge_equal(&result_actual, &result_expected));
}

pub fn main() !void {
    test_point_add(
        .{67021774492365321256634043516869791044054964063002935266026048760627130221114,
          22817883221438079958217963063610327523693969913024717835557258242342029550595},
        .{61124938217888369397608518626468079588341162087856379517664485009963441753645,
          5723382937169086635766392599511664586625983027860520036338464885987365575658},
        .{78518484088348927894279633941273782106215956054783044881924083038087974375069,
          18400956471605157290158330638123206056219981947313880254846397293938760781200}
    );
    test_point_add(
        .{44797955726860071483167773525787460171685721903803276437396496681708013097206,
          112878323467240798018200025047246733779416351939079609883282945822975931592141},
        .{44797955726860071483167773525787460171685721903803276437396496681708013097206,
          2913765770075397405370959961441174073853632726560954156174638184932903079522},
        null
    );
    test_point_add(
        .{95200151225387174391707134980196577229773167465894787919263504089948495725202,
          94213123740092242124032541289267941722641721980066680728855126898974205181980},
        .{95200151225387174391707134980196577229773167465894787919263504089948495725202,
          94213123740092242124032541289267941722641721980066680728855126898974205181980},
        .{5909177817561749019375996132097716007690336893057112295739767175467136927121,
          32162989297956602751967132742255814558956860587998309119003795115938320862381}
    );
    test_point_add(
        .{24050370140998638157368766089090079788245793492514664296883668741529047882113,
          14478882322437672032054487172211630444001167135141445302555096737662467817571},
        .{15045863282447234231848775263852322721143017336655001075698483887751182719636,
          14478882322437672032054487172211630444001167135141445302555096737662467817571},
        .{76695855813870323034353443655745505343881173836470898666875431378628604069914,
          101313206914878523391516497836476277409268817530499118736902487270246366854092}
    );
    test_point_add(
        .{14256779447437936128616290794341059890063336098474125854681710102809814868320,
          90566103014364716248988921534849031279541603477816641946022463390335657035131},
        .{2303067510121489830312323422056091166740725427601969990117485452141659178613,
          25225986222951479174582063473838876573728381187823922093435120617573177636532},
        .{95430772898311369787541983276504378677140303663720683940530878996024106515165,
          48068184564993462938397020947826677061288691733511084479824032705110581338856}
    );
}

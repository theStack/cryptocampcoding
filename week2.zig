// week 2, secp256k1 exercise 1:
// Implement affine point addition for secp256k1
const FE = u256;
const secp256k1_P: FE = (1<<256) - (1<<32) - 977;
fn fe_add(f1: FE, f2: FE) FE { return @intCast((@as(u257, f1) + f2) % secp256k1_P); }
fn fe_sub(f1: FE, f2: FE) FE { return fe_add(f1, secp256k1_P - f2); }
fn fe_mul(f1: FE, f2: FE) FE { return @intCast((@as(u512, f1) * f2) % secp256k1_P); }
fn fe_inv(f: FE) FE          { return @import("week1.zig").mod_inv(f, secp256k1_P); }
fn fe_div(f1: FE, f2: FE) FE { return fe_mul(f1, fe_inv(f2)); }

const GE = struct { x: FE, y: FE, inf: bool };
const point_at_infinity = GE { .x = 0, .y = 0, .inf = true };

fn ge_equal(p1: *const GE, p2: *const GE) bool {
    return p1.x == p2.x and p1.y == p2.y and p1.inf == p2.inf;
}

fn ge_add(p1: *const GE, p2: *const GE) GE {
    // trivial cases
    if (p1.inf) return p2.*;
    if (p2.inf) return p1.*;
    if (p1.x == p2.x and fe_add(p1.y, p2.y) == 0) return point_at_infinity;

    // compute the slope
    const lambda = if (ge_equal(p1, p2))
        fe_div(fe_mul(3, fe_mul(p1.x, p2.x)), fe_mul(2, p1.y)) // point doubling
    else
        fe_div(fe_sub(p2.y, p1.y), fe_sub(p2.x, p1.x)); // point addition

    // compute resulting affine coordinates
    const x_result = fe_sub(fe_mul(lambda, lambda), fe_add(p1.x, p2.x));
    const y_result = fe_sub(fe_mul(lambda, fe_sub(p1.x, x_result)), p1.y);
    return GE { .x = x_result, .y = y_result, .inf = false };
}

const GEJ = struct { x: FE, y: FE, z: FE, inf: bool };
const point_at_infinity_gej = GEJ { .x = 0, .y = 0, .z = 0, .inf = true };

fn gej_add(p1: *const GEJ, p2: *const GEJ) GEJ {
    // TODO: implement
    return GEJ { .x = p1.x + 1, .y = p2.y + 2, .z = 3, .inf = false };
}

fn gej_to_ge(p: *const GEJ) GE {
    // TODO: implement
    return GE { .x = p.x + 23, .y = 42, .inf = false };
}

// more convenient point types for test vectors (null = point at infinity)
const SimplePoint2 = ?struct{FE, FE};
const SimplePoint3 = ?struct{FE, FE, FE};

fn simple_point2_to_ge(tp: SimplePoint2) GE {
    return if (tp != null) GE { .x = tp.?[0], .y = tp.?[1], .inf = false } else point_at_infinity;
}

fn simple_point3_to_gej(tp: SimplePoint3) GEJ {
    return if (tp != null) GEJ {
        .x = tp.?[0], .y = tp.?[1], .z = tp.?[2], .inf = false } else point_at_infinity_gej;
}

fn test_point_add_affine(tp1: SimplePoint2, tp2: SimplePoint2, res: SimplePoint2) void {
    const p1 = simple_point2_to_ge(tp1);
    const p2 = simple_point2_to_ge(tp2);
    const result_expected = simple_point2_to_ge(res);
    const result_actual = ge_add(&p1, &p2);
    @import("std").debug.assert(ge_equal(&result_actual, &result_expected));
}

fn test_point_add_jacobian(tp1: SimplePoint3, tp2: SimplePoint3, res: SimplePoint2) void {
    const p1 = simple_point3_to_gej(tp1);
    const p2 = simple_point3_to_gej(tp2);
    const result_expected = simple_point2_to_ge(res);
    const result_actual_gej = gej_add(&p1, &p2);
    const result_actual = gej_to_ge(&result_actual_gej);
    @import("std").debug.assert(ge_equal(&result_actual, &result_expected));
}

pub fn main() !void {
    test_point_add_affine(
        .{67021774492365321256634043516869791044054964063002935266026048760627130221114,
          22817883221438079958217963063610327523693969913024717835557258242342029550595},
        .{61124938217888369397608518626468079588341162087856379517664485009963441753645,
          5723382937169086635766392599511664586625983027860520036338464885987365575658},
        .{78518484088348927894279633941273782106215956054783044881924083038087974375069,
          18400956471605157290158330638123206056219981947313880254846397293938760781200}
    );
    test_point_add_affine(
        .{44797955726860071483167773525787460171685721903803276437396496681708013097206,
          112878323467240798018200025047246733779416351939079609883282945822975931592141},
        .{44797955726860071483167773525787460171685721903803276437396496681708013097206,
          2913765770075397405370959961441174073853632726560954156174638184932903079522},
        null
    );
    test_point_add_affine(
        .{95200151225387174391707134980196577229773167465894787919263504089948495725202,
          94213123740092242124032541289267941722641721980066680728855126898974205181980},
        .{95200151225387174391707134980196577229773167465894787919263504089948495725202,
          94213123740092242124032541289267941722641721980066680728855126898974205181980},
        .{5909177817561749019375996132097716007690336893057112295739767175467136927121,
          32162989297956602751967132742255814558956860587998309119003795115938320862381}
    );
    test_point_add_affine(
        .{24050370140998638157368766089090079788245793492514664296883668741529047882113,
          14478882322437672032054487172211630444001167135141445302555096737662467817571},
        .{15045863282447234231848775263852322721143017336655001075698483887751182719636,
          14478882322437672032054487172211630444001167135141445302555096737662467817571},
        .{76695855813870323034353443655745505343881173836470898666875431378628604069914,
          101313206914878523391516497836476277409268817530499118736902487270246366854092}
    );
    test_point_add_affine(
        .{14256779447437936128616290794341059890063336098474125854681710102809814868320,
          90566103014364716248988921534849031279541603477816641946022463390335657035131},
        .{2303067510121489830312323422056091166740725427601969990117485452141659178613,
          25225986222951479174582063473838876573728381187823922093435120617573177636532},
        .{95430772898311369787541983276504378677140303663720683940530878996024106515165,
          48068184564993462938397020947826677061288691733511084479824032705110581338856}
    );

    test_point_add_jacobian(
        .{61168739479711927142764658335960185139044138470269152817362835609619277248733,
          21365265259791813296359020025112135293342760115353080382870338561918313862807,
          37064183328797598544560694959943799168750358913858865780091974718018553562419},
        .{75776791705958340557958402430698975706422201066979121642449913138944604425660,
          66383280047496136929271400526347103822935621943780462161181840552194350141564,
          75975606300704613123930174557625573844043347281105167940536468038500802717509},
        .{72863032945283280953636129059545959529634042357753453132026174732744194676931,
          111529132148508388427246132585785101600429639308058372390604751264868469767543}
    );
    test_point_add_jacobian(
        .{89959325059742944430358451400705002920926825355225869621717936807494095714290,
          96093053924735119484524007701924861311484651710593769022900107977673928960245,
          66142611799578950251083409575885695298839488135797694779041885661190727675299},
        .{61152793683249667605361745755257610395039301799655537107480658643593848781730,
          108824838086741573141078213715633247883899533027170274847878148878014138167046,
          20026567909062914103680712539641599080083135680565932483453732406779235372092},
        null
    );
    test_point_add_jacobian(
        .{1547568827951595983041825486208171785819741431893371520256763714464258127790,
          87153109579099129796596751254693228766379983077346253255841414029284516911078,
          105104885998309941273615701006706417602105584887217436384728254947105995740715},
        .{102754269592907928248165438489539780821724369832426272173645274109108284691770,
          38298190034438650883752719589335983487411860447931052099125319988280170002045,
          56745928453254477537417735654158445415425453625586007664329168279192608303666},
        .{21324256287414615615026299379536579336529998865990184416926039607504524853626,
          96719670966356830360698314514227297774284915420887284954650836535688914930874}
    );
}
